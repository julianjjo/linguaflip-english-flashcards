name: LinguaFlip CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Check formatting
      run: npm run format:check

    - name: Type check
      run: npm run type-check

    - name: Build project
      run: npm run build

    - name: Setup test environment
      run: npm run test:setup

    - name: Run health checks
      run: npm run test:health

    - name: Run tests
      run: npm run test:ci
      env:
        CI: true
        NODE_ENV: test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: test-results/
        retention-days: 7

    - name: Cleanup test environment
      if: always()
      run: npm run test:cleanup

  e2e-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build project
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true
        NODE_ENV: test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: test-results/
        retention-days: 7

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build preview
      run: npm run build:preview

    - name: Deploy to preview
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=dist --prod=false
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Deploy to production
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=dist --prod=true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, e2e-test, deploy-preview, deploy-production]
    if: always()

    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI/CD pipeline failed"
        # Add notification logic here (Slack, Discord, etc.)

    - name: Notify on success
      if: success()
      run: |
        echo "✅ CI/CD pipeline completed successfully"
        # Add notification logic here (Slack, Discord, etc.)
---
import MainLayout from '../layouts/MainLayout.astro';
import ThemeToggle from '../components/ThemeToggle.tsx';
import AuthenticatedApp from '../components/AuthenticatedApp.tsx';
import RecallQualityControls from '../components/RecallQualityControls.tsx';

// Check if user is authenticated
const isAuthenticated = Astro.locals.isAuthenticated || false;
const user = Astro.locals.user || null;
---

<MainLayout
  title="Estudiar - LinguaFlip"
  description="Estudia flashcards de inglés con nuestro sistema de repetición espaciada inteligente"
>
  <!-- SEO Meta Tags -->
  <meta property="og:title" content="Estudiar Inglés - LinguaFlip" />
  <meta property="og:description" content="Aprende inglés con flashcards inteligentes y repetición espaciada" />
  <meta property="og:type" content="website" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="Estudiar Inglés - LinguaFlip" />
  <meta name="twitter:description" content="Sistema inteligente de aprendizaje de inglés" />

  <div class="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
    <!-- Header -->
    <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <h1 class="text-xl font-bold text-gray-900 dark:text-white">
              LinguaFlip
            </h1>
          </div>
          <div class="flex items-center space-x-4">
            <ThemeToggle variant="icon" size="md" client:load />
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
          Sesión de Estudio
        </h1>
        <p class="text-gray-600 dark:text-gray-300">
          Estudia tus flashcards y mejora tu inglés
        </p>
      </div>

      <!-- Study Area -->
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 border border-gray-200 dark:border-gray-700">
        <div id="study-container">
          <!-- Loading State -->
          <div class="flex items-center justify-center py-16" id="loading-state">
            <div class="text-center">
              <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 dark:border-primary-400 mx-auto mb-4"></div>
              <p class="text-gray-600 dark:text-gray-300">Cargando flashcards...</p>
            </div>
          </div>

          <!-- No Cards State -->
          <div class="hidden text-center py-16" id="no-cards-state">
            <div class="max-w-md mx-auto">
              <div class="text-6xl mb-4">📚</div>
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                ¡Crea tu primera flashcard!
              </h2>
              <p class="text-gray-600 dark:text-gray-300 mb-6">
                No tienes flashcards aún. Crea una para comenzar a estudiar.
              </p>
              <button
                id="create-first-card-btn"
                class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200"
              >
                Crear Mi Primera Flashcard
              </button>
            </div>
          </div>

          <!-- Auth Required State -->
          <div class="hidden text-center py-16" id="auth-required-state">
            <div class="max-w-md mx-auto">
              <div class="text-6xl mb-4">🔐</div>
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                Inicia Sesión para Estudiar
              </h2>
              <p class="text-gray-600 dark:text-gray-300 mb-6">
                Necesitas iniciar sesión para acceder a tus flashcards y estudiar.
              </p>
              <button
                id="login-btn"
                class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200 mr-3"
              >
                Iniciar Sesión
              </button>
              <button
                id="register-btn"
                class="border border-primary-600 text-primary-600 hover:bg-primary-50 px-6 py-3 rounded-lg font-medium transition-colors duration-200"
              >
                Registrarse
              </button>
            </div>
          </div>

          <!-- Study Content -->
          <div class="hidden" id="study-content">
            <div class="text-center mb-6">
              <div class="text-sm text-gray-600 dark:text-gray-300 mb-2">Progreso</div>
              <div class="text-lg font-semibold text-primary-600 dark:text-primary-400" id="session-progress">
                0 / 0
              </div>
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-3">
                <div
                  class="bg-gradient-to-r from-primary-500 to-primary-600 h-2 rounded-full transition-all duration-300"
                  id="progress-bar"
                  style="width: 0%"
                ></div>
              </div>
            </div>

            <!-- Flashcard Display -->
            <div class="mb-8" id="flashcard-container">
              <!-- Flashcard will be inserted here -->
            </div>

            <!-- Controls -->
            <div class="flex flex-col items-center space-y-4">
              <!-- Flip Button -->
              <button
                id="flip-btn"
                class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200"
              >
                Voltear
              </button>
              
              <!-- Recall Quality Controls -->
              <div id="recall-controls" style="display: none;">
                <RecallQualityControls onRate="rateCurrentCard" client:load />
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Navigation -->
      <div class="mt-8 text-center">
        <a
          href="/dashboard"
          class="inline-flex items-center text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Volver al Dashboard
        </a>
      </div>
    </main>

    <!-- Authentication Modal -->
    <AuthenticatedApp client:load />
  </div>

  <script>
    class StudyPageManager {

      constructor() {
        this.isAuthenticated = false;
        this.user = null;
        this.flashcards = [];
        this.currentCardIndex = 0;
        this.isFlipped = false;
        this.cardStartTime = Date.now();
        this.init();
      }

      async init() {
        // Check authentication status
        await this.checkAuth();
        
        if (!this.isAuthenticated) {
          this.showAuthRequired();
          this.setupAuthButtons();
          return;
        }

        // Load flashcards
        await this.loadFlashcards();
        
        if (this.flashcards.length === 0) {
          this.showNoCards();
          this.setupCreateCardButton();
        } else {
          this.showStudyContent();
          this.setupStudyControls();
          this.displayCurrentCard();
        }
      }

      async checkAuth() {
        try {
          const response = await fetch('/api/auth/me', {
            credentials: 'include'
          });
          
          if (response.ok) {
            const data = await response.json();
            this.isAuthenticated = data.success;
            this.user = data.data?.user || null;
          }
        } catch (error) {
          console.error('Auth check failed:', error);
        }
      }

      async loadFlashcards() {
        if (!this.isAuthenticated) return;

        try {
          const response = await fetch('/api/flashcards', {
            credentials: 'include'
          });
          
          if (response.ok) {
            const data = await response.json();
            this.flashcards = data.data?.flashcards || [];
          }
        } catch (error) {
          console.error('Failed to load flashcards:', error);
        }
      }

      showAuthRequired() {
        this.hideAll();
        const authState = document.getElementById('auth-required-state');
        if (authState) {
          authState.classList.remove('hidden');
        }
      }

      showNoCards() {
        this.hideAll();
        const noCardsState = document.getElementById('no-cards-state');
        if (noCardsState) {
          noCardsState.classList.remove('hidden');
        }
      }

      showStudyContent() {
        this.hideAll();
        const studyContent = document.getElementById('study-content');
        if (studyContent) {
          studyContent.classList.remove('hidden');
        }
      }

      hideAll() {
        const states = ['loading-state', 'no-cards-state', 'auth-required-state', 'study-content'];
        states.forEach(id => {
          const element = document.getElementById(id);
          if (element) {
            element.classList.add('hidden');
          }
        });
      }

      setupAuthButtons() {
        const loginBtn = document.getElementById('login-btn');
        const registerBtn = document.getElementById('register-btn');

        if (loginBtn) {
          loginBtn.addEventListener('click', () => {
            // Trigger login modal through global event
            window.dispatchEvent(new CustomEvent('open-auth-modal', { detail: { mode: 'login' } }));
          });
        }

        if (registerBtn) {
          registerBtn.addEventListener('click', () => {
            // Trigger register modal through global event
            window.dispatchEvent(new CustomEvent('open-auth-modal', { detail: { mode: 'register' } }));
          });
        }
      }

      setupCreateCardButton() {
        const createBtn = document.getElementById('create-first-card-btn');
        if (createBtn) {
          createBtn.addEventListener('click', () => {
            // Trigger create flashcard modal
            window.dispatchEvent(new CustomEvent('open-create-modal'));
          });
        }
      }

      setupStudyControls() {
        const flipBtn = document.getElementById('flip-btn');
        const nextBtn = document.getElementById('next-btn');

        if (flipBtn) {
          flipBtn.addEventListener('click', () => this.flipCard());
        }

        if (nextBtn) {
          nextBtn.addEventListener('click', () => this.nextCard());
        }
      }

      displayCurrentCard() {
        if (this.flashcards.length === 0) return;

        const card = this.flashcards[this.currentCardIndex];
        const container = document.getElementById('flashcard-container');
        
        if (container && card) {
          const front = this.isFlipped ? card.back || card.spanish : card.front || card.english;
          const isBack = this.isFlipped;
          
          container.innerHTML = `
            <div class="bg-gradient-to-br ${isBack ? 'from-blue-500 to-blue-600' : 'from-green-500 to-green-600'} text-white rounded-xl p-8 text-center min-h-[200px] flex items-center justify-center cursor-pointer" onclick="studyManager.flipCard()">
              <div>
                <div class="text-2xl font-bold mb-2">${front}</div>
                <div class="text-sm opacity-75">${isBack ? 'Español' : 'Inglés'}</div>
              </div>
            </div>
          `;
        }

        this.updateProgress();
      }

      flipCard() {
        this.isFlipped = !this.isFlipped;
        this.displayCurrentCard();
        
        const recallControls = document.getElementById('recall-controls');
        if (recallControls) {
          recallControls.style.display = this.isFlipped ? 'block' : 'none';
        }
      }

      async rateCard(quality) {
        if (this.flashcards.length === 0) return;

        const card = this.flashcards[this.currentCardIndex];
        if (!card) return;

        try {
          const response = await fetch('/api/flashcards/review', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({
              cardId: card.id,
              quality: quality,
              responseTime: Date.now() - this.cardStartTime || 0
            })
          });

          const data = await response.json();

          if (response.ok && data.success) {
            // Update the flashcard in our local array
            const updatedCard = data.data.flashcard;
            if (updatedCard) {
              this.flashcards[this.currentCardIndex] = updatedCard;
            }

            // Move to next card
            this.nextCard();
          } else {
            console.error('Failed to rate card:', data.error);
          }
        } catch (error) {
          console.error('Error rating card:', error);
        }
      }

      nextCard() {
        this.currentCardIndex = (this.currentCardIndex + 1) % this.flashcards.length;
        this.isFlipped = false;
        this.cardStartTime = Date.now();
        this.displayCurrentCard();
        
        const recallControls = document.getElementById('recall-controls');
        if (recallControls) {
          recallControls.style.display = 'none';
        }
      }

      updateProgress() {
        const progressText = document.getElementById('session-progress');
        const progressBar = document.getElementById('progress-bar');
        
        if (progressText) {
          progressText.textContent = `${this.currentCardIndex + 1} / ${this.flashcards.length}`;
        }
        
        if (progressBar) {
          const progress = ((this.currentCardIndex + 1) / this.flashcards.length) * 100;
          progressBar.style.width = `${progress}%`;
        }
      }
    }

    // Initialize when DOM is loaded
    let studyManager;
    document.addEventListener('DOMContentLoaded', () => {
      studyManager = new StudyPageManager();
    });

    // Global function for RecallQualityControls to call
    window.rateCurrentCard = (quality) => {
      if (studyManager) {
        studyManager.rateCard(quality);
      }
    };

    // Listen for auth events to reload the page
    window.addEventListener('auth-success', () => {
      window.location.reload();
    });

    // Listen for flashcard creation to reload
    window.addEventListener('flashcard-created', () => {
      window.location.reload();
    });
  </script>
</MainLayout>
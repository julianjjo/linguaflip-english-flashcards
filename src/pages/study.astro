---
import MainLayout from '../layouts/MainLayout.astro';
import ThemeToggle from '../components/ThemeToggle.tsx';
import AuthenticatedApp from '../components/AuthenticatedApp.tsx';
import RecallQualityControls from '../components/RecallQualityControls.tsx';
---

<MainLayout
  title="Estudiar - LinguaFlip"
  description="Estudia flashcards de inglés con nuestro sistema de repetición espaciada inteligente"
>
  <!-- SEO Meta Tags -->
  <meta property="og:title" content="Estudiar Inglés - LinguaFlip" />
  <meta
    property="og:description"
    content="Aprende inglés con flashcards inteligentes y repetición espaciada"
  />
  <meta property="og:type" content="website" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="Estudiar Inglés - LinguaFlip" />
  <meta
    name="twitter:description"
    content="Sistema inteligente de aprendizaje de inglés"
  />

  <div
    class="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900"
  >
    <!-- Header -->
    <header
      class="border-b border-gray-200 bg-white shadow-sm dark:border-gray-700 dark:bg-gray-800"
    >
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="flex h-16 items-center justify-between">
          <div class="flex items-center">
            <h1 class="text-xl font-bold text-gray-900 dark:text-white">
              LinguaFlip
            </h1>
          </div>
          <div class="flex items-center space-x-4">
            <ThemeToggle variant="icon" size="md" client:load />
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8">
      <div class="mb-8 text-center">
        <h1 class="mb-2 text-3xl font-bold text-gray-900 dark:text-white">
          Sesión de Estudio
        </h1>
        <p class="text-gray-600 dark:text-gray-300">
          Estudia tus flashcards y mejora tu inglés
        </p>
      </div>

      <!-- Study Area -->
      <div
        class="rounded-2xl border border-gray-200 bg-white p-8 shadow-xl dark:border-gray-700 dark:bg-gray-800"
      >
        <div id="study-container">
          <!-- Loading State -->
          <div
            class="flex items-center justify-center py-16"
            id="loading-state"
          >
            <div class="text-center">
              <div
                class="mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-b-2 border-primary-600 dark:border-primary-400"
              >
              </div>
              <p class="text-gray-600 dark:text-gray-300">
                Cargando flashcards...
              </p>
            </div>
          </div>

          <!-- No Cards State -->
          <div class="hidden py-16 text-center" id="no-cards-state">
            <div class="mx-auto max-w-md">
              <div class="mb-4 text-6xl">📚</div>
              <h2 class="mb-2 text-2xl font-bold text-gray-900 dark:text-white">
                ¡Crea tu primera flashcard!
              </h2>
              <p class="mb-6 text-gray-600 dark:text-gray-300">
                No tienes flashcards aún. Crea una para comenzar a estudiar.
              </p>
              <button
                id="create-first-card-btn"
                class="rounded-lg bg-primary-600 px-6 py-3 font-medium text-white transition-colors duration-200 hover:bg-primary-700"
              >
                Crear Mi Primera Flashcard
              </button>
            </div>
          </div>

          <!-- Auth Required State -->
          <div class="hidden py-16 text-center" id="auth-required-state">
            <div class="mx-auto max-w-md">
              <div class="mb-4 text-6xl">🔐</div>
              <h2 class="mb-2 text-2xl font-bold text-gray-900 dark:text-white">
                Inicia Sesión para Estudiar
              </h2>
              <p class="mb-6 text-gray-600 dark:text-gray-300">
                Necesitas iniciar sesión para acceder a tus flashcards y
                estudiar.
              </p>
              <button
                id="login-btn"
                class="mr-3 rounded-lg bg-primary-600 px-6 py-3 font-medium text-white transition-colors duration-200 hover:bg-primary-700"
              >
                Iniciar Sesión
              </button>
              <button
                id="register-btn"
                class="rounded-lg border border-primary-600 px-6 py-3 font-medium text-primary-600 transition-colors duration-200 hover:bg-primary-50"
              >
                Registrarse
              </button>
            </div>
          </div>

          <!-- Study Content -->
          <div class="hidden" id="study-content">
            <div class="mb-6 text-center">
              <div class="mb-2 text-sm text-gray-600 dark:text-gray-300">
                Progreso
              </div>
              <div
                class="text-lg font-semibold text-primary-600 dark:text-primary-400"
                id="session-progress"
              >
                0 / 0
              </div>
              <div
                class="mt-3 h-2 w-full rounded-full bg-gray-200 dark:bg-gray-700"
              >
                <div
                  class="h-2 rounded-full bg-gradient-to-r from-primary-500 to-primary-600 transition-all duration-300"
                  id="progress-bar"
                  style="width: 0%"
                >
                </div>
              </div>
            </div>

            <!-- Flashcard Display -->
            <div class="mb-8" id="flashcard-container">
              <!-- Flashcard will be inserted here -->
            </div>

            <!-- Controls -->
            <div class="flex flex-col items-center space-y-4">
              <!-- Flip Button -->
              <button
                id="flip-btn"
                class="rounded-lg bg-gray-600 px-6 py-3 font-medium text-white transition-colors duration-200 hover:bg-gray-700"
              >
                Voltear
              </button>

              <!-- Recall Quality Controls -->
              <div id="recall-controls" style="display: none;">
                <RecallQualityControls onRate="rateCurrentCard" client:load />
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Navigation -->
      <div class="mt-8 text-center">
        <a
          href="/dashboard"
          class="inline-flex items-center text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300"
        >
          <svg
            class="mr-2 h-5 w-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Volver al Dashboard
        </a>
      </div>
    </main>

    <!-- Authentication Modal -->
    <AuthenticatedApp client:load />
  </div>

  <script>
    interface Flashcard {
      id: string;
      english: string;
      spanish: string;
      front?: string;
      back?: string;
      exampleEnglish?: string;
      exampleSpanish?: string;
      image?: string;
      category?: string;
      tags?: string[];
      reviewCount?: number;
      lastReviewed?: string | null;
      dueDate?: string;
      interval?: number;
      easinessFactor?: number;
      repetitions?: number;
    }

    interface User {
      userId: string;
      email?: string;
      username?: string;
      role?: string;
    }

    class StudyPageManager {
      flashcards: Flashcard[];
      currentCardIndex: number;
      isFlipped: boolean;
      cardStartTime: number;
      isAuthenticated: boolean;
      user: User | null;

      constructor() {
        this.isAuthenticated = false;
        this.user = null;
        this.flashcards = [];
        this.currentCardIndex = 0;
        this.isFlipped = false;
        this.cardStartTime = Date.now();
        this.init();
      }

      async init() {
        // Check authentication status
        await this.checkAuth();

        if (!this.isAuthenticated) {
          this.showAuthRequired();
          this.setupAuthButtons();
          return;
        }

        // Load flashcards
        await this.loadFlashcards();

        if (this.flashcards.length === 0) {
          this.showNoCards();
          this.setupCreateCardButton();
        } else {
          this.showStudyContent();
          this.setupStudyControls();
          this.displayCurrentCard();
        }
      }

      async checkAuth() {
        try {
          const response = await fetch('/api/auth/me', {
            credentials: 'include',
          });

          if (response.ok) {
            const data = await response.json();
            this.isAuthenticated = data.success;
            this.user = data.data?.user || null;
          }
        } catch (error) {
          console.error('Auth check failed:', error);
        }
      }

      async loadFlashcards() {
        if (!this.isAuthenticated) return;

        try {
          const response = await fetch('/api/flashcards', {
            credentials: 'include',
          });

          if (response.ok) {
            const data = await response.json();
            let flashcards = data.data?.flashcards || [];

            // Fix flashcards with null or invalid IDs
            flashcards = flashcards.map((card: Flashcard) => {
              if (!card.id || card.id === null || card.id === undefined) {
                console.log('Fixing card with null ID:', card.english);
                // Generate a new ID for cards with missing IDs
                card.id = `card_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
              }
              return card;
            });

            this.flashcards = flashcards;
            console.log('Loaded flashcards:', this.flashcards);
          }
        } catch (error) {
          console.error('Failed to load flashcards:', error);
        }
      }

      showAuthRequired() {
        this.hideAll();
        const authState = document.getElementById('auth-required-state');
        if (authState) {
          authState.classList.remove('hidden');
        }
      }

      showNoCards() {
        this.hideAll();
        const noCardsState = document.getElementById('no-cards-state');
        if (noCardsState) {
          noCardsState.classList.remove('hidden');
        }
      }

      showStudyContent() {
        this.hideAll();
        const studyContent = document.getElementById('study-content');
        if (studyContent) {
          studyContent.classList.remove('hidden');
        }
      }

      hideAll() {
        const states = [
          'loading-state',
          'no-cards-state',
          'auth-required-state',
          'study-content',
        ];
        states.forEach((id) => {
          const element = document.getElementById(id);
          if (element) {
            element.classList.add('hidden');
          }
        });
      }

      setupAuthButtons() {
        const loginBtn = document.getElementById('login-btn');
        const registerBtn = document.getElementById('register-btn');

        if (loginBtn) {
          loginBtn.addEventListener('click', () => {
            // Trigger login modal through global event
            window.dispatchEvent(
              new CustomEvent('open-auth-modal', { detail: { mode: 'login' } })
            );
          });
        }

        if (registerBtn) {
          registerBtn.addEventListener('click', () => {
            // Trigger register modal through global event
            window.dispatchEvent(
              new CustomEvent('open-auth-modal', {
                detail: { mode: 'register' },
              })
            );
          });
        }
      }

      setupCreateCardButton() {
        const createBtn = document.getElementById('create-first-card-btn');
        if (createBtn) {
          createBtn.addEventListener('click', () => {
            // Trigger create flashcard modal
            window.dispatchEvent(new CustomEvent('open-create-modal'));
          });
        }
      }

      setupStudyControls() {
        const flipBtn = document.getElementById('flip-btn');
        const nextBtn = document.getElementById('next-btn');

        if (flipBtn) {
          flipBtn.addEventListener('click', () => this.flipCard());
        }

        if (nextBtn) {
          nextBtn.addEventListener('click', () => this.nextCard());
        }
      }

      displayCurrentCard() {
        if (this.flashcards.length === 0) return;

        const card = this.flashcards[this.currentCardIndex];
        const container = document.getElementById('flashcard-container');

        if (container && card) {
          const front = this.isFlipped
            ? card.back || card.spanish
            : card.front || card.english;
          const isBack = this.isFlipped;

          container.innerHTML = `
            <div class="bg-gradient-to-br ${isBack ? 'from-blue-500 to-blue-600' : 'from-green-500 to-green-600'} text-white rounded-xl p-8 text-center min-h-[200px] flex items-center justify-center cursor-pointer" onclick="studyManager.flipCard()">
              <div>
                <div class="text-2xl font-bold mb-2">${front}</div>
                <div class="text-sm opacity-75">${isBack ? 'Español' : 'Inglés'}</div>
              </div>
            </div>
          `;
        }

        this.updateProgress();
      }

      flipCard() {
        this.isFlipped = !this.isFlipped;
        this.displayCurrentCard();

        const recallControls = document.getElementById('recall-controls');
        if (recallControls) {
          recallControls.style.display = this.isFlipped ? 'block' : 'none';
        }
      }

      async rateCard(quality: number): Promise<void> {
        if (this.flashcards.length === 0) return;

        const card = this.flashcards[this.currentCardIndex];
        if (!card) return;

        try {
          console.log('Frontend - attempting to rate card:', card);
          console.log(
            'Frontend - cardId being sent:',
            card.id,
            'type:',
            typeof card.id
          );

          const response = await fetch('/api/flashcards/review', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({
              cardId: card.id,
              quality: quality,
              responseTime: Date.now() - this.cardStartTime || 0,
            }),
          });

          const data = await response.json();

          if (response.ok && data.success) {
            // Update the flashcard in our local array
            const updatedCard = data.data.flashcard;
            if (updatedCard) {
              this.flashcards[this.currentCardIndex] = updatedCard;
            }

            // Move to next card
            this.nextCard();
          } else {
            console.error('Failed to rate card:', data.error);
          }
        } catch (error) {
          console.error('Error rating card:', error);
        }
      }

      nextCard() {
        this.currentCardIndex =
          (this.currentCardIndex + 1) % this.flashcards.length;
        this.isFlipped = false;
        this.cardStartTime = Date.now();
        this.displayCurrentCard();

        const recallControls = document.getElementById('recall-controls');
        if (recallControls) {
          recallControls.style.display = 'none';
        }
      }

      updateProgress() {
        const progressText = document.getElementById('session-progress');
        const progressBar = document.getElementById('progress-bar');

        if (progressText) {
          progressText.textContent = `${this.currentCardIndex + 1} / ${this.flashcards.length}`;
        }

        if (progressBar) {
          const progress =
            ((this.currentCardIndex + 1) / this.flashcards.length) * 100;
          progressBar.style.width = `${progress}%`;
        }
      }
    }

    // Initialize when DOM is loaded
    let studyManager: StudyPageManager;
    document.addEventListener('DOMContentLoaded', () => {
      studyManager = new StudyPageManager();
    });

    // Extend Window interface to include rateCurrentCard
    declare global {
      interface Window {
        rateCurrentCard: (quality: number) => void;
      }
    }

    // Global function for RecallQualityControls to call
    window.rateCurrentCard = (quality: number): void => {
      if (studyManager) {
        studyManager.rateCard(quality);
      }
    };

    // Listen for auth events to reload the page
    window.addEventListener('auth-success', () => {
      window.location.reload();
    });

    // Listen for flashcard creation to reload
    window.addEventListener('flashcard-created', () => {
      window.location.reload();
    });
  </script>
</MainLayout>
